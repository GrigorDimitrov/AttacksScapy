#!/usr/bin/python
from scapy.all import *

# Interacts with a client by going through the three-way handshake.
# Shuts down the connection immediately after the connection has been established.
# Akaljed Dec 2010, http://www.akaljed.wordpress.com
def ek(sip, dip):
    print("Running Neutrino EK attack")

    # Wait for client to connect.
    a=sniff(count=1,filter=f"tcp and host {dip} and port 80")

    # some variables for later use.
    ValueOfPort=a[0].sport
    SeqNr=a[0].seq
    AckNr=a[0].seq+1

    # Generating the IP layer:
    ip=IP(src=sip, dst=dip)
    # Generating TCP layer:
    TCP_SYNACK=TCP(sport=80, dport=ValueOfPort, flags="SA", seq=SeqNr, ack=AckNr, options=[('MSS', 1460)])

    #send SYNACK to remote host AND receive ACK.
    ANSWER=sr1(ip/TCP_SYNACK)

    # Capture next TCP packets with dport 80. (contains http GET request)
    GEThttp = sniff(filter="tcp and port 80",count=1,prn=lambda x:x.sprintf("{IP:%IP.src%: %TCP.dport%}"))
    AckNr=AckNr+len(GEThttp[0].load)
    SeqNr=a[0].seq+1

    # (Sanity check: size of data should be greater than 1.)
    if len(GEThttp[0].load)>1:
        print(GEThttp[0].load)

    # Generate TCP data for GET request ACK
    tcp=TCP(sport=80, dport=ValueOfPort, flags="A", seq=SeqNr, ack=AckNr, options=[('Len',0)])

    # Construct whole network packet, send it and fetch the returning ack.
    send(ip/tcp)

    # Generate custom http file content.
    html1 = 'HTTP/1.1 200 OK\r\n' \
        'Date: Mon, 10 Dec 2012 06:33:53 GMT\r\n' \
        'Server: Apache/2.2.22 (Ubuntu)\r\n' \
        'Last-Modified: Mon, 10 Dec 2012 06:18:23 GMT\r\n' \
        'ETag: "1062407-6-4d079884fb4f2"\r\n' \
        'Accept-Ranges: bytes\r\nContent-Length: 52\r\n' \
        'Vary: Accept-Encoding\r\nKeep-Alive: timeout=5, max=100\r\n' \
        'Connection: Keep-Alive\r\n' \
        'Content-Type: text/html\r\n' \
        '\r\n=[0x9,0x9,0x2f,0x2a,0x2a,0xa,0x9,0x9,0x20,0x2a,0x20,'

    # Generate TCP data
    data1=TCP(sport=80, dport=ValueOfPort, flags="PA", seq=SeqNr, ack=AckNr)

    # Construct whole network packet, send it and fetch the returning ack.
    ackdata1=sr1(ip/data1/html1)

    # Capture next TCP packets with dport 80. (contains FIN/ACK)
    FIN_ACK = sniff(filter="tcp and port 80",count=1,prn=lambda x:x.sprintf("{IP:%IP.src%: %TCP.dport%}"))

    # Store new sequence number.
    SeqNr=FIN_ACK[0].ack
    AckNr=FIN_ACK[0].seq+1

    ## Generate ACK packet
    ack_fin=TCP(sport=80, dport=ValueOfPort, flags="A", seq=SeqNr, ack=AckNr)
    send(ip/ack_fin)

    ## Generate FIN PSH ACK
    fin_psh_ack = TCP(sport=80, dport=ValueOfPort, flags="FPA", seq=SeqNr, ack=AckNr)
    send(ip/fin_psh_ack)

    # The End
